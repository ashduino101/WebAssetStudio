/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function swap_bytes_xbox(a: number, b: number, c: number): void;
export function bgr2rgb(a: number, b: number, c: number): void;
export function decode_a8(a: number, b: number, c: number, d: number): void;
export function decode_argb4444(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rgb24(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_argb32(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rgb565(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_bgr565(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_r16(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rgba4444(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_bgra4444(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_normalizedbyte2(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_bgra5551(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rgba1010102(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_bgra32(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rhalf(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rghalf(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rgbahalf(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rfloat(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rgfloat(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rgbafloat(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_yuy2(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rgb9e5float(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rg16(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_r8(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rg32(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rgb48(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_rgba64(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_dxt1(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_dxt3(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_dxt5(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_pvrtc(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function decode_etc1(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_etc2(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_etc2_a1(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_etc2_a8(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_eacr(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_eacr_signed(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_eacrg(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_eacrg_signed(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_bc4(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_bc5(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_bc6h(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_bc7(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_atc_rgb4(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_atc_rgba8(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function decode_astc(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function decode(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function lz4_compress(a: number, b: number, c: number, d: number): void;
export function lz4_decompress(a: number, b: number, c: number, d: number, e: number): void;
export function encode_png(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_wasmbindgentestcontext_free(a: number): void;
export function wasmbindgentestcontext_new(): number;
export function wasmbindgentestcontext_args(a: number, b: number, c: number): void;
export function wasmbindgentestcontext_run(a: number, b: number, c: number): number;
export function __wbgtest_console_log(a: number): void;
export function __wbgtest_console_debug(a: number): void;
export function __wbgtest_console_info(a: number): void;
export function __wbgtest_console_warn(a: number): void;
export function __wbgtest_console_error(a: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h8a7cc90aaaf4e4bc(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke3_mut__h331e9dad6f2f58c0(a: number, b: number, c: number, d: number, e: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h4be52c405766fc87(a: number, b: number, c: number, d: number): void;
